getwd()
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
my_numeric <- 72
my_logical <- FALSE
my_character <- "thunder"
my_numeric * my_logical
my_integer <- 10L
my_integer + my_numeric
class(my_integer + my_numeric)
my_vector <- c( Wesley, Burr, 0608400L, TRUE )
my_vector <- c("Wesley", "Burr", 0608400L, TRUE )
my_vector <- c("Wesley", "Burr", 0608400L, TRUE )
my_country <- "Canada"
my_vector2 <- c(my_vector, my_country)
my_vector2
class(my_vector2)
as.numeric(my_vector2)
myNumbers <- c(-0.09, -4.86, -3.99, 3.5, -3.37, -2.97, -2.42, -6.96, -7.5, -3.41, -5.42,
-4.5, -2.48, 4.02, 3.66, -7.25, 0.15, -6.48)
m <- mean(myNumbers)
s <- sd(myNumbers)
t <- ( m+5 ) / ( s/18 )
t
knitr::opts_chunk$set(echo = TRUE)
# p[X > 45], n=50, p=0.894
pbinom(q = 45, size = 50, prob = 0.894, lower.tail = FALSE)
# Normal Approximation
# always need >= or <= version of the statement
# P[X >= 46] -> X_corr = 45.5
pnorm(q = 45.5, mean = 50 * 0.894, sd = sqrt( 50 * 0.894 * (1-0.894) ), lower.tail = FALSE)
# p[X > 45], n=50, p=0.894
pbinom(q = 45, size = 50, prob = 0.894, lower.tail = FALSE)
# Normal Approximation
# always need >= or <= version of the statement
# P[X >= 46] -> X_corr = 45.5
pnorm(q = 45.5, mean = 50 * 0.894, sd = sqrt( 50 * 0.894 * (1-0.894) ), lower.tail = FALSE)
# Way #3 - USE Z-SCORES
Zscore <- (45.5 - 50 * 0.894) / sqrt( 50 * 0.894 * (1-0.894))
pnorm(q = Zscore, mean = 0, sd = 1, lower.tail = FALSE)
# P[X >= 40], n=100, p=0.5  - actually P[X > 39]
pbinom(q = 39, size = 100, prob = 0.5, lower.tail = FALSE)
# Normal Approximation
pnorm(q = 39.5, mean = 100 * 0.5, sd = sqrt(100 * 0.5 * 0.5),
lower.tail = FALSE)
# P[X >= 200]
pbinom(q = 199, size = 500, prob = 0.325, lower.tail = FALSE)
# approximation, using Zscore
Zscore <- (199.5 - 500 * 0.325) / sqrt(500 * 0.325 * (1-0.325))
pnorm(Zscore, mean = 0, sd = 1, lower.tail = FALSE)
# P[50 <= X <= 250]
# Way #1 - dbinom
sum( dbinom( x = 50:250, size = 500, prob = 0.325) )
# Way #2 - pbinom
pbinom(q = 250, size = 500, prob = 0.325, lower.tail = TRUE) -
pbinom(q = 49, size = 500, prob = 0.325, lower.tail = TRUE)
# Way #3 - normal approximation
pnorm(q = 250.5, mean = 100 * 0.325, sd = sqrt(100 * 0.325 * (1-0.325)),
lower.tail = TRUE) -
pnorm(q = 49.5, mean = 100 * 0.325, sd = sqrt(100 * 0.325 * (1-0.325)),
lower.tail = TRUE)
(250 - 325)/sqrt(100*0.325*(1-0.325))
# P[50 <= X <= 250]
# Way #1 - dbinom
sum( dbinom( x = 50:250, size = 500, prob = 0.325) )
# Way #2 - pbinom
pbinom(q = 250, size = 500, prob = 0.325, lower.tail = TRUE) -
pbinom(q = 49, size = 500, prob = 0.325, lower.tail = TRUE)
# Way #3 - normal approximation
pnorm(q = 250.5, mean = 500 * 0.325, sd = sqrt(500 * 0.325 * (1-0.325)),
lower.tail = TRUE) -
pnorm(q = 49.5, mean = 500 * 0.325, sd = sqrt(500 * 0.325 * (1-0.325)),
lower.tail = TRUE)
# P[Z >= 1.4]
pnorm(q = 1.4, mean = 0, sd = 1, lower.tail = FALSE)
# P[Z <= 0.9]
pnorm(q = 0.9, mean = 0, sd = 1, lower.tail = TRUE)
# P[-1.4 <= Z <= 2.0]
pnorm(q = 2.0, mean = 0, sd = 1, lower.tail = TRUE) -
pnorm(q = -1.4, mean = 0, sd = 1, lower.tail = TRUE)
# P[68 <= X <= 72]
pnorm(q = 72, mean = 70, sd = 3, lower.tail = TRUE) -
pnorm(q = 68, mean = 70, sd = 3, lower.tail = TRUE)
# P[68 <= X <= 72]
pnorm(q = 72, mean = 70, sd = 3, lower.tail = TRUE) -
pnorm(q = 68, mean = 70, sd = 3, lower.tail = TRUE)
# could also do this with z-scores ...
Z1 <- (68 - 70)/3
Z2 <- (72 - 70)/3
pnorm(Z2, mean = 0, sd = 1, lower.tail = TRUE) -
pnorm(Z1, mean = 0, sd = 1, lower.tail = TRUE)
# a man is at the 10th percentile, how tall is he?
# P[X <= X0] = 0.10 - unknown is X0
qnorm(p = 0.10, mean = 70, sd = 3, lower.tail = TRUE)
# (a) P[Z>=z0] = 0.42
qnorm(p = 0.42, mean = 0, sd = 1, lower.tail = FALSE)
# (b) P[Z <= z0] = 0.91
qnorm(0.91, mean = 0, sd = 1, lower.tail = TRUE)
# (c) P[-z0 <= Z <= z0] = 0.19
qnorm(0.405, mean = 0, sd = 1, lower.tail = TRUE)  # -z0
qnorm(0.405, mean = 0, sd = 1, lower.tail = FALSE)  # +z0
# (a) P[Z>=z0] = 0.42
qnorm(p = 0.42, mean = 0, sd = 1, lower.tail = FALSE)
# (b) P[Z <= z0] = 0.91
qnorm(0.91, mean = 0, sd = 1, lower.tail = TRUE)
# (c) P[-z0 <= Z <= z0] = 0.19
qnorm(0.405, mean = 0, sd = 1, lower.tail = TRUE)  # -z0
qnorm(0.405, mean = 0, sd = 1, lower.tail = FALSE)  # +z0
# (d) P[-z0 <= Z <= 0] = 0.22
qnorm(p = 0.28, mean = 0, sd = 1, lower.tail = TRUE) # -z0
# how many students scored above 500 points
# P[X >= 500] --> converted into HOW MANY
prob <- pnorm(q = 500, mean = 511, sd = 120, lower.tail = FALSE)
prob * 1698521
# if a student was above the 90th percentile, what score did they beat?
qnorm(p = 0.90, mean = 511, sd = 120, lower.tail = TRUE)
# what score was the 20th percentile?
qnorm(p = 0.20, mean = 511, sd = 120, lower.tail = TRUE)
hist(results, breaks = 20)
deck <- c(rep("P", 35), c("N", 13))
N <- 10^5
results <- numeric(N)
for(j in 1:N) {
index <- sample(x = 1:48, size = 24, replace = FALSE)
results[j] <- ( length(which(deck[ index] == "P")) -
length(which(deck[-index] == "P")) ) / 24
}
knitr::include_graphics("fig/fig_2_1_results.png")
hist(results, breaks = 20)
length(which(results <= (0.573 - 0.875))) / N
file93552c8824d5 <- read.csv("~/Downloads/file93552c8824d5.csv", header=FALSE)
View(file93552c8824d5)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
dat <- read_xlsx("court_updated.xlsx")
unique(dat$`Court - Section/Discipline`)
by_disc <- lapply(by_method, FUN = function(x) {
x %>%
group_by(`Court - Section/Discipline`) %>%
group_split() })
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
dat <- read_xlsx("court_updated.xlsx")
categories <- unique(dat$`Court - Method of Attendance`)
categories
if(length(which(is.na(dat$`Court - Method of Attendance`))) > 0) {
dat <- dat[-which(is.na(dat$`Court - Method of Attendance`)), ]
}
categories <- unique(dat$`Court - Method of Attendance`)
categories
names(dat) <- c("Project_ID", "ID", "Case_Number", "Scientist", "Lab",
"Date_End", "Offence_Type_UCR", "Location", "Discipline",
"Area_of_Testimony", "Attendance_Outcome", "Reason_No_Testimony",
"Attendance_Method", "Time_Preparation", "Time_Testimony",
"Time_Travel", "Time_Travel_Calc", "Time_Wait_Calc",
"Time_Total", "Time_Total_Calc",
"Estimated_Round_Trip", "Minimum_Round_Trip", "Maximum_Round_Trip",
"Estimated_Cost", "Estimated_Cost_Calc",
"Notes", "Exclude", "Region")
dat[dat$Attendance_Method %in% c("video conference",
"video Conference"), "Attendance_Method"] <- "Video Conference"
library("dplyr")
by_method <- dat %>% group_by(Attendance_Method) %>% group_split()
total_cases <- nrow(dat)
split_cases <- unlist(lapply(by_method, nrow))
method <- unlist(lapply(by_method, FUN = function(x) { x[1, "Attendance_Method"] }))
data.frame(Method = method,
Cases = split_cases,
Proportion = round(split_cases / total_cases, 2))
unique(dat$`Court - Section/Discipline`)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
dat <- read_xlsx("court_updated.xlsx")
categories <- unique(dat$`Court - Method of Attendance`)
categories
if(length(which(is.na(dat$`Court - Method of Attendance`))) > 0) {
dat <- dat[-which(is.na(dat$`Court - Method of Attendance`)), ]
}
categories <- unique(dat$`Court - Method of Attendance`)
categories
names(dat) <- c("Project_ID", "ID", "Case_Number", "Scientist", "Lab",
"Date_End", "Offence_Type_UCR", "Location", "Discipline",
"Area_of_Testimony", "Attendance_Outcome", "Reason_No_Testimony",
"Attendance_Method", "Time_Preparation", "Time_Testimony",
"Time_Travel", "Time_Travel_Calc", "Time_Wait_Calc",
"Time_Total", "Time_Total_Calc",
"Estimated_Round_Trip", "Minimum_Round_Trip", "Maximum_Round_Trip",
"Estimated_Cost", "Estimated_Cost_Calc",
"Notes", "Exclude", "Region")
dat[dat$Attendance_Method %in% c("video conference",
"video Conference"), "Attendance_Method"] <- "Video Conference"
library("dplyr")
by_method <- dat %>% group_by(Attendance_Method) %>% group_split()
total_cases <- nrow(dat)
split_cases <- unlist(lapply(by_method, nrow))
method <- unlist(lapply(by_method, FUN = function(x) { x[1, "Attendance_Method"] }))
data.frame(Method = method,
Cases = split_cases,
Proportion = round(split_cases / total_cases, 2))
unique(dat$Discipline)
by_disc <- lapply(by_method, FUN = function(x) {
x %>%
group_by(Discipline) %>%
group_split() })
in_person <- unlist(lapply(by_disc[[1]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
in_person <- data.frame(Discipline = in_person[seq(1, length(in_person), 2)],
Count = in_person[seq(2, length(in_person), 2)])
video <- unlist(lapply(by_disc[[2]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
video <- data.frame(Discipline = video[seq(1, length(video), 2)],
Count = video[seq(2, length(video), 2)])
total <- data.frame(Discipline = unique(dat$`Court - Section/Discipline`),
In_Person = 0,
Prop_I = 0,
Video = 0,
Prop_V = 0)
total <- data.frame(Discipline = unique(dat$Discipline),
In_Person = 0,
Prop_I = 0,
Video = 0,
Prop_V = 0)
# fix the orders so they are compatible
total <- total[order(total$Discipline), ]
video <- video[order(video$Discipline), ]
in_person <- in_person[order(in_person$Discipline), ]
total[total$Discipline %in% in_person$Discipline, "In_Person"] <-
in_person$Count
total[total$Discipline %in% in_person$Discipline, "Prop_I"] <-
round(as.numeric(in_person$Count) / sum(as.numeric(in_person$Count), na.rm = TRUE), 2)
total[total$Discipline %in% video$Discipline, "Video"] <-
video$Count
total[total$Discipline %in% video$Discipline, "Prop_V"] <-
round(as.numeric(video$Count) / sum(as.numeric(video$Count), na.rm = TRUE), 2)
total
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
dat <- read_xlsx("court_updated.xlsx")
categories <- unique(dat$`Court - Method of Attendance`)
categories
if(length(which(is.na(dat$`Court - Method of Attendance`))) > 0) {
dat <- dat[-which(is.na(dat$`Court - Method of Attendance`)), ]
}
categories <- unique(dat$`Court - Method of Attendance`)
categories
names(dat) <- c("Project_ID", "ID", "Case_Number", "Scientist", "Lab",
"Date_End", "Offence_Type_UCR", "Location", "Discipline",
"Area_of_Testimony", "Attendance_Outcome", "Reason_No_Testimony",
"Attendance_Method", "Time_Preparation", "Time_Testimony",
"Time_Travel", "Time_Travel_Calc", "Time_Wait_Calc",
"Time_Total", "Time_Total_Calc",
"Estimated_Round_Trip", "Minimum_Round_Trip", "Maximum_Round_Trip",
"Estimated_Cost", "Estimated_Cost_Calc",
"Notes", "Exclude", "Region")
dat[dat$Attendance_Method %in% c("video conference",
"video Conference"), "Attendance_Method"] <- "Video Conference"
library("dplyr")
by_method <- dat %>% group_by(Attendance_Method) %>% group_split()
total_cases <- nrow(dat)
split_cases <- unlist(lapply(by_method, nrow))
method <- unlist(lapply(by_method, FUN = function(x) { x[1, "Attendance_Method"] }))
data.frame(Method = method,
Cases = split_cases,
Proportion = round(split_cases / total_cases, 2))
by_disc <- lapply(by_method, FUN = function(x) {
x %>%
group_by(Discipline) %>%
group_split() })
str(by_disc)
lapply(by_disc, dim)
lapply(by_disc[[1]], dim)
in_person <- unlist(lapply(by_disc[[1]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
in_person <- data.frame(Discipline = in_person[seq(1, length(in_person), 2)],
Count = in_person[seq(2, length(in_person), 2)])
in_person
video <- unlist(lapply(by_disc[[2]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
video <- data.frame(Discipline = video[seq(1, length(video), 2)],
Count = video[seq(2, length(video), 2)])
video
total <- data.frame(Discipline = unique(dat$Discipline),
In_Person = 0,
Prop_I = 0,
Video = 0,
Prop_V = 0)
# fix the orders so they are compatible
total <- total[order(total$Discipline), ]
video <- video[order(video$Discipline), ]
in_person <- in_person[order(in_person$Discipline), ]
total[total$Discipline %in% in_person$Discipline, "In_Person"] <-
in_person$Count
total[total$Discipline %in% in_person$Discipline, "Prop_I"] <-
round(as.numeric(in_person$Count) / sum(as.numeric(in_person$Count), na.rm = TRUE), 2)
total
total
video
# fix the orders so they are compatible
total <- total[order(total$Discipline), ]
video <- video[order(video$Discipline), ]
in_person <- in_person[order(in_person$Discipline), ]
in_person
video
in_person$Count
total <- data.frame(Discipline = unique(dat$Discipline),
In_Person = 0,
Prop_I = 0,
Video = 0,
Prop_V = 0)
str(dat$Discipline)
str(video)
by_disc <- lapply(by_method, FUN = function(x) {
x %>%
group_by(Discipline) %>%
group_split() })
in_person <- unlist(lapply(by_disc[[1]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
in_person <- data.frame(Discipline = in_person[seq(1, length(in_person), 2)],
Count = in_person[seq(2, length(in_person), 2)])
in_person
str(in_person)
str(by_disc[[1]])
str(total)
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
dat <- read_xlsx("court_updated.xlsx")
categories <- unique(dat$`Court - Method of Attendance`)
categories
if(length(which(is.na(dat$`Court - Method of Attendance`))) > 0) {
dat <- dat[-which(is.na(dat$`Court - Method of Attendance`)), ]
}
categories <- unique(dat$`Court - Method of Attendance`)
categories
names(dat) <- c("Project_ID", "ID", "Case_Number", "Scientist", "Lab",
"Date_End", "Offence_Type_UCR", "Location", "Discipline",
"Area_of_Testimony", "Attendance_Outcome", "Reason_No_Testimony",
"Attendance_Method", "Time_Preparation", "Time_Testimony",
"Time_Travel", "Time_Travel_Calc", "Time_Wait_Calc",
"Time_Total", "Time_Total_Calc",
"Estimated_Round_Trip", "Minimum_Round_Trip", "Maximum_Round_Trip",
"Estimated_Cost", "Estimated_Cost_Calc",
"Notes", "Exclude", "Region")
dat[dat$Attendance_Method %in% c("video conference",
"video Conference"), "Attendance_Method"] <- "Video Conference"
library("dplyr")
by_method <- dat %>% group_by(Attendance_Method) %>% group_split()
total_cases <- nrow(dat)
split_cases <- unlist(lapply(by_method, nrow))
method <- unlist(lapply(by_method, FUN = function(x) { x[1, "Attendance_Method"] }))
data.frame(Method = method,
Cases = split_cases,
Proportion = round(split_cases / total_cases, 2))
unique(dat$Discipline)
by_disc <- lapply(by_method, FUN = function(x) {
x %>%
group_by(Discipline) %>%
group_split() })
in_person <- unlist(lapply(by_disc[[1]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
in_person <- data.frame(Discipline = in_person[seq(1, length(in_person), 2)],
Count = in_person[seq(2, length(in_person), 2)])
video <- unlist(lapply(by_disc[[2]], FUN = function(x) {
c(x[1, "Discipline"], nrow(x)) }))
video <- data.frame(Discipline = video[seq(1, length(video), 2)],
Count = video[seq(2, length(video), 2)])
total <- data.frame(Discipline = unique(dat$Discipline),
In_Person = 0,
Prop_I = 0,
Video = 0,
Prop_V = 0)
video
str(video)
# fix the factor thing ... sigh
total$Discipline <- levels(total$Discipline)[total$Discipline]
str(total)
video$Discipline <- levels(video$Discipline)[video$Discipline]
in_person$Discipline <- levels(in_person$Discipline)[in_person$Discipline]
video
total
str(total)
str(video)
video$Count <- levels(video$Count)[video$Count]
in_person$Count <- levels(in_person$Count)[in_person$Count]
video
in_person
total[total$Discipline %in% in_person$Discipline, "In_Person"] <-
in_person$Count
total[total$Discipline %in% in_person$Discipline, "Prop_I"] <-
round(as.numeric(in_person$Count) / sum(as.numeric(in_person$Count), na.rm = TRUE), 2)
total[total$Discipline %in% video$Discipline, "Video"] <-
video$Count
total[total$Discipline %in% video$Discipline, "Prop_V"] <-
round(as.numeric(video$Count) / sum(as.numeric(video$Count), na.rm = TRUE), 2)
total
tt_anova <- dat[, c("Time_Total", "Discipline", "Attendance_Method")]
tt_anova$Time_Total <- as.numeric(tt_anova$Time_Total)
tt_anova$Discipline <- as.factor(tt_anova$Discipline)
tt_anova$Attendance_Method <- as.factor(tt_anova$Attendance_Method)
tt_anova <- tt_anova[!is.na(tt_anova$Time_Total), ]
mod <- aov( lm( Time_Total ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
boxplot(Time_Total ~ Discipline * Attendance_Method, data = tt_anova)
tt_anova <- tt_anova[tt_anova$Time_Total <= 30, ]
mod <- aov( lm( Time_Total ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
tuk <- TukeyHSD(mod)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig)
tmp
unique(dat$Discipline)
tuk[[2]]
which_sig <- rownames(tuk[[3]])[tuk[[3]][, 4] <= 0.05]
tmp <- subset(tuk[[3]], rownames(tuk[[3]]) %in% which_sig[!is.na(which_sig)])
tmp
tt_anova <- dat[, c("Time_Wait_Calc", "Discipline", "Attendance_Method")]
tt_anova$Time_Wait <- as.numeric(tt_anova$Time_Wait_Calc)
tt_anova$Discipline <- as.factor(tt_anova$Discipline)
tt_anova$Attendance_Method <- as.factor(tt_anova$Attendance_Method)
tt_anova <- tt_anova[!is.na(tt_anova$Time_Wait), ]
mod <- aov( lm( Time_Wait ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
boxplot(Time_Wait ~ Discipline * Attendance_Method, data = tt_anova)
tt_anova <- tt_anova[tt_anova$Time_Wait <= 35, ]
mod <- aov( lm( Time_Wait ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
tuk <- TukeyHSD(mod)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
which_sig
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig)
tmp
```{r}
tuk[[2]]
which_sig <- rownames(tuk[[3]])[tuk[[3]][, 4] <= 0.05]
tmp <- subset(tuk[[3]], rownames(tuk[[3]]) %in% which_sig[!is.na(which_sig)])
tmp
tt_anova <- dat[, c("Time_Wait_Calc", "Discipline", "Attendance_Method")]
tt_anova$Time_Wait <- as.numeric(tt_anova$Time_Wait_Calc)
tt_anova$Discipline <- as.factor(tt_anova$Discipline)
tt_anova$Attendance_Method <- as.factor(tt_anova$Attendance_Method)
tt_anova <- tt_anova[!is.na(tt_anova$Time_Wait), ]
# remove the negatives
tt_anova <- tt_anova[tt_anova$Time_Wait < 0, ]
mod <- aov( lm( Time_Wait ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
tt_anova <- dat[, c("Time_Preparation", "Discipline", "Attendance_Method")]
tt_anova$Time_Preparation <- as.numeric(tt_anova$Time_Preparation)
tt_anova$Discipline <- as.factor(tt_anova$Discipline)
tt_anova$Attendance_Method <- as.factor(tt_anova$Attendance_Method)
tt_anova <- tt_anova[!is.na(tt_anova$Time_Preparation), ]
mod <- aov( lm( Time_Preparation ~ Discipline * Attendance_Method,
data = tt_anova) )
summary(mod)
mod <- aov( lm( Time_Preparation ~ Discipline + Attendance_Method,
data = tt_anova) )
summary(mod)
tuk <- TukeyHSD(mod)
tuk[[1]]
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig[!is.na(which_sig)])
tmp
boxplot(TimePreparation ~ Discipline + Attendance_Method, data = tt_anova)
boxplot(Time_Preparation ~ Discipline + Attendance_Method, data = tt_anova)
boxplot(tt_anova[tt_anova$Discipline == "PSS - Firearms" &
tt_anova$Attendance_Method == "Video",
"Time_Preparation"])
tt_anova[tt_anova$Discipline == "PSS - Firearms" &
tt_anova$Attendance_Method == "Video"
,]
tt_anova$Discipline
str(tt_anova$Discipline)
tt_anova <- subset(tt_anova, Time_Preparation < 200)
boxplot(Time_Preparation ~ Discipline + Attendance_Method, data = tt_anova)
mod <- aov( lm( Time_Preparation ~ Discipline + Attendance_Method,
data = tt_anova) )
summary(mod)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig[!is.na(which_sig)])
tmp
tuk <- TukeyHSD(mod)
which_sig <- rownames(tuk[[1]])[tuk[[1]][, 4] <= 0.05]
tmp <- subset(tuk[[1]], rownames(tuk[[1]]) %in% which_sig[!is.na(which_sig)])
tmp
setwd("~/doc/Talks/23_ISI_TIES")
